statements       (NL)* statement (NL+ statement)* (NL)*

statement       expr
                return expr?
                next
                break

expr            var IDENTIFIER EQ expr
                comp-expr ((and|or) comp-expr)*

comp-expr       not comp-expr
                arith-expr ((EE|NE|LT|GT|LTE|GTE|IN) arith-expr)*

arith-expr      term ((PLUS|MINUS) term)*

term            factor ((MUL|DIV) factor)*

factor          (PLUS|MINUS) factor
                power

power           call (POW factor)*

call            atom (EVALIN (expr (SEP expr)*)? EVALOUT)?

atom            INT|FLOAT|NULL|STRING|IDENTIFIER
                EVALIN expr EVALOUT
                list-expr
                if-expr
                for-expr
                while-expr
                func-expr

list-expr       LISTIN (expr (SEP expr)*)? LISTOUT

if-expr         if expr then
                (statement elif-expr|else-expr?) | (NL statements end|elif-expr|else-expr)
elif-expr       elif expr then
                (statement elif-expr|else-expr?) | (NL statements end|elif-expr|else-expr)

else-expr       else
                statement | (NL statements end)

for-expr        for IDENTIFIER EQ expr to expr
                (step expr)? do
                statement | (NL statements end)

while-expr      while expr do
                statement | (NL statements end)

func-def        func IDENTIFIER?
                EVALIN (IDENTIFIER (SEP IDENTIFIER)*)? EVALOUT
                REP
                expr | (NL statements end)
